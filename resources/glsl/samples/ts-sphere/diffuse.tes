#version 410 core
layout(triangles, equal_spacing, cw) in;

in TCS_OUT
{
    vec3 position;
    vec3 diffuse;
    vec3 normal;
} tes_in[];

out TES_OUT
{
    vec3 diffuse;
    vec3 normal;
    vec3 patchDistance;
} tes_out;

uniform mat4 WorldMatrix;		// object_to_world
uniform mat4 ViewMatrix;		// world_to_view
uniform mat4 ProjectionMatrix;	// view_to_clip
uniform mat3 NormalMatrix;		// normal_to_view

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

void main()
{
    tes_out.patchDistance = gl_TessCoord;
    tes_out.diffuse = interpolate3D(tes_in[0].diffuse, tes_in[1].diffuse, tes_in[2].diffuse);
    tes_out.normal = normalize(interpolate3D(tes_in[0].normal, tes_in[1].normal, tes_in[2].normal));
    tes_out.normal = NormalMatrix * tes_out.normal;
    
    vec3 p0 = gl_TessCoord.x * tes_in[0].position;
    vec3 p1 = gl_TessCoord.y * tes_in[1].position;
    vec3 p2 = gl_TessCoord.z * tes_in[2].position;
    gl_Position = ProjectionMatrix * ViewMatrix * WorldMatrix * vec4(normalize(p0 + p1 + p2), 1);
}
